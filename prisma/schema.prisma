generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum ServiceType {
  CHAT
  VOICE
  VIDEO
}

enum Currency {
  EGP
  SAR
  AED
  USD
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum RecordType {
  REPORTS
  PRESCRIPTION
  LABS
  IMAGING
  OTHER
}

enum NotificationType {
  APPOINTMENT
  CHAT
  PAYMENT
  RECORD
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum UpdateType {
  PRICING
  AVAILABILITY
  SERVICE
  DEPARTMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  ACTIVE
  BANNED
}

// =========================
// User
// =========================
model User {
  id        Int        @id @default(autoincrement())
  fullName  String?
  email     String     @unique
  password  String
  role      Role       @default(PATIENT)
  createdAt DateTime   @default(now())
  status    UserStatus @default(ACTIVE)

  // Relations
  doctor                Doctor?
  patient               Patient?
  transactionsAsDoctor  Transaction[]         @relation("DoctorTransactions")
  transactionsAsPatient Transaction[]         @relation("PatientTransactions")
  doctorReviews         Review[]              @relation("DoctorReviews")
  patientReviews        Review[]              @relation("PatientReviews")
  doctorAppointments    Appointment[]         @relation("DoctorAppointments")
  patientAppointments   Appointment[]         @relation("PatientAppointments")
  notifications         Notification[]
  messages              Message[]
  doctorUpdateRequests  DoctorUpdateRequest[]

  // Conversations
  conversations Conversation[] @relation("ConversationParticipants")

  // Payments
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?
  Payment        Payment[]
}

// =========================
// Doctor
// =========================
model Doctor {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  // Profile
  title              String?
  department         Department? @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  yearsOfExperience  Int?
  licenseNumber      String?
  avatarUrl          String?
  bio                String?
  mustChangePassword Boolean     @default(true)
  phone              String?

  // Details
  languages    String[]
  hospitals    String[]
  education    String[]
  certificates String[]

  // Availability & Pricing
  pricing       ChatVoiceVideoPricing[]
  availability  DoctorAvailability? // one-to-one availability record
  videoProvider String?
  currency      Currency?

  // Policies
  cancellationPolicy String?
  refundPolicy       String?
  reschedulePolicy   String?

  // Relations
  doctorUpdateRequests DoctorUpdateRequest[]
  Payment              Payment[]
  Consultation         Consultation[]
}

// =========================
// Availability
// =========================
model DoctorAvailability {
  id       Int    @id @default(autoincrement())
  doctorId Int    @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  chat  Boolean @default(false)
  voice Boolean @default(false)
  video Boolean @default(false)
}

// =========================
// Department
// =========================
model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  doctors Doctor[]
}

// =========================
// Pricing
// =========================
model ChatVoiceVideoPricing {
  id       Int    @id @default(autoincrement())
  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  service  ServiceType
  currency Currency
  price    Float
}

// =========================
// Patient
// =========================
model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  gender    String
  country   String
  phone     String
  birthdate DateTime

  otp       String?
  otpExpiry DateTime?
  verified  Boolean   @default(false)

  records      MedicalRecord[]
  Payment      Payment[]
  Consultation Consultation[]
}

// =========================
// Medical Records
// =========================
model MedicalRecord {
  id        Int        @id @default(autoincrement())
  patientId Int
  patient   Patient    @relation(fields: [patientId], references: [id])
  type      RecordType
  fileUrl   String
  createdAt DateTime   @default(now())
  notes     String?
}

// =========================
// Transactions
// =========================
model Transaction {
  id        Int      @id @default(autoincrement())
  type      String
  amount    Float
  createdAt DateTime @default(now())

  doctorId  Int
  patientId Int

  doctor  User @relation("DoctorTransactions", fields: [doctorId], references: [id])
  patient User @relation("PatientTransactions", fields: [patientId], references: [id])
}

// =========================
// Appointments
// =========================
model Appointment {
  id Int @id @default(autoincrement())

  doctorId  Int
  patientId Int

  doctor  User @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient User @relation("PatientAppointments", fields: [patientId], references: [id])

  appointmentType ServiceType
  status          AppointmentStatus @default(CONFIRMED)

  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes         String?
  payments      Payment[]
  consultations Consultation[]
}

// =========================
// Reviews
// =========================
model Review {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  patientId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  doctor  User @relation("DoctorReviews", fields: [doctorId], references: [id])
  patient User @relation("PatientReviews", fields: [patientId], references: [id])
}

// =========================
// Notifications
// =========================
model Notification {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  type        NotificationType
  title       String
  message     String
  redirectUrl String?
  metadata    Json?

  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =========================
// Conversation
// =========================
model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User[]
}

// =========================
// Message
// =========================
model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])

  content   String
  type      MessageType @default(TEXT)
  seen      Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// =========================
// Payment
// =========================
model Payment {
  id            Int          @id @default(autoincrement())
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId Int?

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId Int

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int

  amount   Float
  currency Currency
  status   PaymentStatus @default(UNPAID)

  paymobTransactionId String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  User                User?    @relation(fields: [userId], references: [id])
  userId              Int?
}

// =========================
// Consultation
// =========================
model Consultation {
  id            Int         @id @default(autoincrement())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId Int

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int

  notes         String?
  diagnosis     String?
  prescriptions String?
  attachments   String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// =========================
// Doctor Update Requests
// =========================
model DoctorUpdateRequest {
  id       Int    @id @default(autoincrement())
  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  types   UpdateType[]
  payload Json

  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  reviewedBy Int?
  reviewer   User?   @relation(fields: [reviewedBy], references: [id])
  note       String?
}
